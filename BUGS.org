* DONE <2012-04-23 lun 12:05>  Pebble length is too big for persistent pebbling.
  CLOSED: [2012-04-23 lun 14:26]

  `pebble -b 3 -p 1 -Z' output 6 instead of 5

* DONE <2012-04-23 lun 12:06>  Does not work if -Z and -t are on simultaneously.
  CLOSED: [2012-04-23 lun 19:53]

  `pebble -b 3 -p 1 -Z -t' output “no pebble”.

* DONE <2012-04-23 lun 12:08>  Assertion failure on -t
  CLOSED: [2012-04-23 lun 14:26]

  `pebble -b 3 -p 1 -t'
* TODO <2013-04-12 Fri> Parser for KTH does not like if ":" has no space

  If we try to Parse the following files 

  : 2
  : 1 :
  : 2 :1

  or 
  
  : 2
  : 1 :
  : 2: 1

  or

  : 2
  : 1 :
  : 2:1

  it fails.
* DONE <2013-09-06 Fri> Check why pebbling on binary trees does not work
  CLOSED: [2013-09-09 Mon 17:55]
  
  When I computed the reversible  pebbling number for the binary trees
  of height 2 it gave me 5. Should not be 4?

  *Solution:* When I wanted to get a tree of height $h$ I was actually
  producing a tree of height $h+1$.  That is why the pebbling was more
  expensive.
  
* DONE <2013-09-06 Fri> Am I hashing the pebbling configuration correctly?
  CLOSED: [2013-09-09 Mon 17:58]

  Configuration  with  the  same  black and  white  pebbles  but  with
  different “useful_pebbles” vector are considered equivalent.
  
  *Solution:* I conjecture that this way  is correct, but I cannot prove
  it  yet. So  I created  a separated  branch with  this feature,  and
  reverted to  the simplest  algorithm (no useful_pebbles  bit vector)
  in the master branch.

  We  verify that  this strategy  is correct,  at least  for pure  bfs
  approach.
